;; ======================== storage ========================

(int) load_data() inline {
  var cs = get_data().begin_parse();
  var res = (
    cs~load_uint(64),
    cs~load_uint(104),
    cs~load_uint(32),
    cs~load_uint(256),
    cs~load_uint(256),
    cs~load_msg_addr()
  );
  cs.end_parse();
  return res;
}

() save_data(
              int serial_ref_no,
              int serial_expiry_timestamp,
              int auth_psk,
              int public_key,
              tuple grand_committee_addr,
              slice owner
  ) impure {
  return begin_cell()
    .store_int(serial_ref_no, 64)
    .store_uint(serial_expiry_timestamp, 104)
    .store_uint(auth_psk, 32)
    .store_uint(public_key, 256)
    .store_uint(grand_committee_addr, 256)
    .store_slice(owner)
    .end_cell().set_data();
}

;; ======================== messages ========================

() recv_external(slice in_msg) impure {
  var signature = in_msg~load_bits(512);
  var cs = in_msg;
  var (msg_type, public_key, auth_psk, grand_proposal_address) = (cs~load_uint(32), cs~load_slice(256), cs~load_uint(32), cs~load_ref());
}

() recv_internal(int msg_value, cell in_msg, slice in_msg_body) impure {
  if (in_msg_body.slice_empty?()) { 
    return (); 
  }
  int op = in_msg_body~load_uint(32);
  var (counter) = load_data();
  if (op == 1) {
    save_data(counter + 1);
  }
}

;; ======================== getters =========================

int counter() method_id {
  var (counter) = load_data();
  return counter;
}

